
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
////////////////////////////////////////////////////// AUTOGENERATED //////////////////////////////////////////////////////
// WARNING: All code changes to this file will be lost upon regeneration.                                                //
// Autogenerated on <#=$"{DateTime.Now:yyyy-MM-dd HH:mm:ss:ffffff}"#>                                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System;

namespace Unknown6656.Generics;

<#const string default_dict = "DelayedCachedDictionary";#>

public static partial class FuncCache
{
    // public const string DefaultDictionaryCacheName = nameof(<#=default_dict#><,>);

    public static Type DefaultDictionaryCacheType { get; } = typeof(<#=default_dict#><,>);
}

<#
    int maxsize = 10;

    try
    {
        string path = Host.ResolvePath("maxdim.txt");

        maxsize = int.Parse(File.ReadAllText(path).Trim()) + 1;
    }
    catch { }

    IEnumerable<int> r(int f, int t) => Enumerable.Range(f, t);

    for (int dim = 1; dim <= maxsize; ++dim)
    {
        string argnames = string.Join(", ", r(0, dim).Select(i => "key" + i));
        string typenames = string.Join(", ", r(0, dim).Select(i => "TKey" + i));
        string tupletypes = string.Join(", ", r(0, dim).Select(i => $"TKey{i} key{i}"));
        string dicttypenames = dim == 1 ? "TKey0" : $"({tupletypes})";
#>
/// <summary>
/// Represents a generic function cache, which internally stores the results of function executions and recalls them when needed.
/// The cache essentially turns a given function into it's lazy variant, which only once invokes the underlying function for each given parameter.
/// All subsequent calls with the same parameters are replaced by look-ups using an dictionary.
/// </summary>
/// <typeparam name="TDict">The internal cache dictionary parameter type.</typeparam>
<#
        for (int i = 0; i < dim; ++i)
            WriteLine($"/// <typeparam name=\"TKey{i}\">The generic parameter type of argument no. {i}.</typeparam>");
#>
/// <typeparam name="TValue">The function's generic return type.</typeparam>
public class _FuncCache<TDict, <#=typenames#>, TValue>
    where TDict : IDictionary<<#=dicttypenames#>, TValue>, new()
{
    /// <summary>
    /// The function to be cached.
    /// </summary>
    public Func<<#=typenames#>, TValue> Function { get; }

    /// <summary>
    /// The underlying cache.
    /// </summary>
    public TDict Cache { get; } = new();

    /// <summary>
    /// The cache's size. This is <b>not</b> its binary size (i.e. size in bytes), but rather the count of stored cache entries.
    /// </summary>
    public int CacheSize => Cache.Count;

    /// <inheritdoc cref="Invoke"/>
    public TValue this[<#=tupletypes#>] => Invoke(<#=argnames#>);


    /// <summary>
    /// Creates a new function cache for the given function.
    /// </summary>
    /// <param name="function">The function to be cached.</param>
    public _FuncCache(Func<<#=typenames#>, TValue> function) => Function = function;

    /// <summary>
    /// Creates a new function cache for the given function.
    /// </summary>
    /// <param name="function_pointer">The function to which the given pointer is pointing.</param>
    public unsafe _FuncCache(delegate*<<#=typenames#>, TValue> function_pointer)
        : this(LINQ.ToFunction(function_pointer))
    {
    }

    /// <summary>
    /// Invokes the underlying function.
    /// </summary>
<#
        for (int i = 0; i < dim; ++i)
            WriteLine($"    /// <param name=\"key{i}\">The function argument no. {i}.</typeparam>");
#>
    /// <returns>The function's return value. This value will be fetched from the internal look-up table if the function has already once been called with the exact same arguments.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TValue Invoke(<#=tupletypes#>)
    {
        var key = (<#=argnames#>);

        if (!Cache.TryGetValue(key, out TValue? value))
            Cache[key] = value = Function(<#=argnames#>);

        return value;
    }

    /// <summary>
    /// Clears the cache by removing all entries.
    /// </summary>
    public void ClearCache() => Cache.Clear();

    public override string ToString() => $"[Cached: {CacheSize} entries] {<#=string.Join("} x {", r(0, dim).Select(i => $"typeof(TKey{i})"))#>} -> {typeof(TValue)}";

    public static implicit operator _FuncCache<TDict, <#=typenames#>, TValue>(Func<<#=typenames#>, TValue> function) => new(function);

    public static implicit operator TDict(_FuncCache<TDict, <#=typenames#>, TValue> cached) => cached.Cache;

    public static implicit operator Func<<#=typenames#>, TValue>(_FuncCache<TDict, <#=typenames#>, TValue> cached) => cached.Function;
}

/// <inheritdoc/>
public class FuncCache<<#=typenames#>, TValue>
    : _FuncCache<<#=default_dict#><<#=dicttypenames#>, TValue>, <#=typenames#>, TValue>
{
    public FuncCache(Func<<#=typenames#>, TValue> function)
        : base(function)
    {
    }

    public unsafe FuncCache(delegate*<<#=typenames#>, TValue> function_pointer)
        : base(function_pointer)
    {
    }

    public static implicit operator FuncCache<<#=typenames#>, TValue>(Func<<#=typenames#>, TValue> function) => new(function);
}

public static partial class FuncCache
{
    public static FuncCache<<#=typenames#>, TValue> Cached<<#=typenames#>, TValue>(this Func<<#=typenames#>, TValue> function) => new(function);
}

<#
    }
#>
