////////////////////////////////////////////////////// AUTOGENERATED //////////////////////////////////////////////////////
// WARNING: All code changes to this file will be lost upon regeneration.                                                //
// Autogenerated on 2022-02-08 12:32:15:476895                                                                           //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Runtime.CompilerServices;
using System;

namespace Unknown6656.Generics;


public static unsafe partial class LINQ
{

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1) Join<T0, T1>(this T0 t0, T1 t1) =>
        (t0, t1);

    /// <summary>
    /// Creates a new array with exactly 2 elements from the given 2-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 2-tuple.</param>
    /// <returns>The array (Length = 2) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1) tuple) =>
        new[] { tuple.t0, tuple.t1 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1) Apply<T, U>(this (T e0, T e1) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2) Join<T0, T1, T2>(this (T0 left, (T1, T2) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2) Join<T0, T1, T2>(this T0 left, (T1, T2) right) =>
        (left, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2) Join<T0, T1, T2>(this ((T0, T1) left, T2 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2) Join<T0, T1, T2>(this (T0, T1) left, T2 right) =>
        (left.Item1, left.Item2, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2) Join<T0, T1, T2>(this T0 t0, T1 t1, T2 t2) =>
        (t0, t1, t2);

    /// <summary>
    /// Creates a new array with exactly 3 elements from the given 3-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 3-tuple.</param>
    /// <returns>The array (Length = 3) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2) Apply<T, U>(this (T e0, T e1, T e2) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3) Join<T0, T1, T2, T3>(this (T0 left, (T1, T2, T3) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3) Join<T0, T1, T2, T3>(this T0 left, (T1, T2, T3) right) =>
        (left, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3) Join<T0, T1, T2, T3>(this ((T0, T1) left, (T2, T3) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3) Join<T0, T1, T2, T3>(this (T0, T1) left, (T2, T3) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3) Join<T0, T1, T2, T3>(this ((T0, T1, T2) left, T3 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3) Join<T0, T1, T2, T3>(this (T0, T1, T2) left, T3 right) =>
        (left.Item1, left.Item2, left.Item3, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3) Join<T0, T1, T2, T3>(this T0 t0, T1 t1, T2 t2, T3 t3) =>
        (t0, t1, t2, t3);

    /// <summary>
    /// Creates a new array with exactly 4 elements from the given 4-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 4-tuple.</param>
    /// <returns>The array (Length = 4) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3) Apply<T, U>(this (T e0, T e1, T e2, T e3) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this (T0 left, (T1, T2, T3, T4) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this T0 left, (T1, T2, T3, T4) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this ((T0, T1) left, (T2, T3, T4) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this (T0, T1) left, (T2, T3, T4) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this ((T0, T1, T2) left, (T3, T4) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this (T0, T1, T2) left, (T3, T4) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this ((T0, T1, T2, T3) left, T4 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this (T0, T1, T2, T3) left, T4 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4) Join<T0, T1, T2, T3, T4>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4) =>
        (t0, t1, t2, t3, t4);

    /// <summary>
    /// Creates a new array with exactly 5 elements from the given 5-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 5-tuple.</param>
    /// <returns>The array (Length = 5) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this (T0 left, (T1, T2, T3, T4, T5) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this T0 left, (T1, T2, T3, T4, T5) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this ((T0, T1) left, (T2, T3, T4, T5) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this (T0, T1) left, (T2, T3, T4, T5) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this ((T0, T1, T2) left, (T3, T4, T5) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this (T0, T1, T2) left, (T3, T4, T5) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this ((T0, T1, T2, T3) left, (T4, T5) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this (T0, T1, T2, T3) left, (T4, T5) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this ((T0, T1, T2, T3, T4) left, T5 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this (T0, T1, T2, T3, T4) left, T5 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5) Join<T0, T1, T2, T3, T4, T5>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) =>
        (t0, t1, t2, t3, t4, t5);

    /// <summary>
    /// Creates a new array with exactly 6 elements from the given 6-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 6-tuple.</param>
    /// <returns>The array (Length = 6) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this (T0 left, (T1, T2, T3, T4, T5, T6) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this T0 left, (T1, T2, T3, T4, T5, T6) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this ((T0, T1) left, (T2, T3, T4, T5, T6) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this (T0, T1) left, (T2, T3, T4, T5, T6) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this ((T0, T1, T2) left, (T3, T4, T5, T6) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this (T0, T1, T2) left, (T3, T4, T5, T6) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this ((T0, T1, T2, T3) left, (T4, T5, T6) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this (T0, T1, T2, T3) left, (T4, T5, T6) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this ((T0, T1, T2, T3, T4) left, (T5, T6) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this (T0, T1, T2, T3, T4) left, (T5, T6) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this ((T0, T1, T2, T3, T4, T5) left, T6 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this (T0, T1, T2, T3, T4, T5) left, T6 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6) Join<T0, T1, T2, T3, T4, T5, T6>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6) =>
        (t0, t1, t2, t3, t4, t5, t6);

    /// <summary>
    /// Creates a new array with exactly 7 elements from the given 7-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 7-tuple.</param>
    /// <returns>The array (Length = 7) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this T0 left, (T1, T2, T3, T4, T5, T6, T7) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this ((T0, T1, T2, T3, T4, T5, T6) left, T7 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this (T0, T1, T2, T3, T4, T5, T6) left, T7 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7) Join<T0, T1, T2, T3, T4, T5, T6, T7>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7) =>
        (t0, t1, t2, t3, t4, t5, t6, t7);

    /// <summary>
    /// Creates a new array with exactly 8 elements from the given 8-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 8-tuple.</param>
    /// <returns>The array (Length = 8) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, T8 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, T8 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8);

    /// <summary>
    /// Creates a new array with exactly 9 elements from the given 9-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 9-tuple.</param>
    /// <returns>The array (Length = 9) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8) left, T9 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8) left, T9 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <param name="t9">The tuple element at position 10.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/> for the argument <paramref name="t9"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9);

    /// <summary>
    /// Creates a new array with exactly 10 elements from the given 10-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 10-tuple.</param>
    /// <returns>The array (Length = 10) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8, tuple.t9 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8, U e9) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8), func(x.e9));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, T10 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, T10 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <param name="t9">The tuple element at position 10.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/> for the argument <paramref name="t9"/>.</typeparam>
    /// <param name="t10">The tuple element at position 11.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/> for the argument <paramref name="t10"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10);

    /// <summary>
    /// Creates a new array with exactly 11 elements from the given 11-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 11-tuple.</param>
    /// <returns>The array (Length = 11) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8, tuple.t9, tuple.t10 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8, U e9, U e10) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9, T e10) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8), func(x.e9), func(x.e10));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, T11 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, T11 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <param name="t9">The tuple element at position 10.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/> for the argument <paramref name="t9"/>.</typeparam>
    /// <param name="t10">The tuple element at position 11.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/> for the argument <paramref name="t10"/>.</typeparam>
    /// <param name="t11">The tuple element at position 12.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/> for the argument <paramref name="t11"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11);

    /// <summary>
    /// Creates a new array with exactly 12 elements from the given 12-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 12-tuple.</param>
    /// <returns>The array (Length = 12) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10, T t11) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8, tuple.t9, tuple.t10, tuple.t11 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8, U e9, U e10, U e11) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9, T e10, T e11) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8), func(x.e9), func(x.e10), func(x.e11));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, T12 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, T12 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <param name="t9">The tuple element at position 10.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/> for the argument <paramref name="t9"/>.</typeparam>
    /// <param name="t10">The tuple element at position 11.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/> for the argument <paramref name="t10"/>.</typeparam>
    /// <param name="t11">The tuple element at position 12.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/> for the argument <paramref name="t11"/>.</typeparam>
    /// <param name="t12">The tuple element at position 13.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/> for the argument <paramref name="t12"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12);

    /// <summary>
    /// Creates a new array with exactly 13 elements from the given 13-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 13-tuple.</param>
    /// <returns>The array (Length = 13) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10, T t11, T t12) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8, tuple.t9, tuple.t10, tuple.t11, tuple.t12 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8, U e9, U e10, U e11, U e12) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9, T e10, T e11, T e12) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8), func(x.e9), func(x.e10), func(x.e11), func(x.e12));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12, tuple.right.Item13);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12, right.Item13);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, (T12, T13) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, (T12, T13) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) left, T13 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.left.Item13, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) left, T13 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, left.Item13, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <param name="t9">The tuple element at position 10.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/> for the argument <paramref name="t9"/>.</typeparam>
    /// <param name="t10">The tuple element at position 11.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/> for the argument <paramref name="t10"/>.</typeparam>
    /// <param name="t11">The tuple element at position 12.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/> for the argument <paramref name="t11"/>.</typeparam>
    /// <param name="t12">The tuple element at position 13.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/> for the argument <paramref name="t12"/>.</typeparam>
    /// <param name="t13">The tuple element at position 14.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/> for the argument <paramref name="t13"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12, T13 t13) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13);

    /// <summary>
    /// Creates a new array with exactly 14 elements from the given 14-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 14-tuple.</param>
    /// <returns>The array (Length = 14) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10, T t11, T t12, T t13) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8, tuple.t9, tuple.t10, tuple.t11, tuple.t12, tuple.t13 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8, U e9, U e10, U e11, U e12, U e13) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9, T e10, T e11, T e12, T e13) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8), func(x.e9), func(x.e10), func(x.e11), func(x.e12), func(x.e13));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12, tuple.right.Item13, tuple.right.Item14);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12, right.Item13, right.Item14);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12, tuple.right.Item13);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12, right.Item13);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, (T12, T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, (T12, T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) left, (T13, T14) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.left.Item13, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) left, (T13, T14) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, left.Item13, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) left, T14 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.left.Item13, tuple.left.Item14, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) left, T14 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, left.Item13, left.Item14, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <param name="t9">The tuple element at position 10.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/> for the argument <paramref name="t9"/>.</typeparam>
    /// <param name="t10">The tuple element at position 11.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/> for the argument <paramref name="t10"/>.</typeparam>
    /// <param name="t11">The tuple element at position 12.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/> for the argument <paramref name="t11"/>.</typeparam>
    /// <param name="t12">The tuple element at position 13.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/> for the argument <paramref name="t12"/>.</typeparam>
    /// <param name="t13">The tuple element at position 14.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/> for the argument <paramref name="t13"/>.</typeparam>
    /// <param name="t14">The tuple element at position 15.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/> for the argument <paramref name="t14"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12, T13 t13, T14 t14) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14);

    /// <summary>
    /// Creates a new array with exactly 15 elements from the given 15-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 15-tuple.</param>
    /// <returns>The array (Length = 15) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10, T t11, T t12, T t13, T t14) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8, tuple.t9, tuple.t10, tuple.t11, tuple.t12, tuple.t13, tuple.t14 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8, U e9, U e10, U e11, U e12, U e13, U e14) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9, T e10, T e11, T e12, T e13, T e14) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8), func(x.e9), func(x.e10), func(x.e11), func(x.e12), func(x.e13), func(x.e14));

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12, tuple.right.Item13, tuple.right.Item14, tuple.right.Item15);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this T0 left, (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12, right.Item13, right.Item14, right.Item15);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12, tuple.right.Item13, tuple.right.Item14);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1) left, (T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12, right.Item13, right.Item14);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12, tuple.right.Item13);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2) left, (T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12, right.Item13);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11, tuple.right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3) left, (T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11, right.Item12);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10, tuple.right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4) left, (T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10, right.Item11);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9, tuple.right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5) left, (T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9, right.Item10);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8, tuple.right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6) left, (T7, T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8, right.Item9);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7, tuple.right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7) left, (T8, T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7, right.Item8);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6, tuple.right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8) left, (T9, T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6, right.Item7);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5, tuple.right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9) left, (T10, T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5, right.Item6);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4, tuple.right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) left, (T11, T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, right.Item1, right.Item2, right.Item3, right.Item4, right.Item5);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, (T12, T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3, tuple.right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) left, (T12, T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, right.Item1, right.Item2, right.Item3, right.Item4);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) left, (T13, T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.left.Item13, tuple.right.Item1, tuple.right.Item2, tuple.right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) left, (T13, T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, left.Item13, right.Item1, right.Item2, right.Item3);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) left, (T14, T15) right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.left.Item13, tuple.left.Item14, tuple.right.Item1, tuple.right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) left, (T14, T15) right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, left.Item13, left.Item14, right.Item1, right.Item2);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="tuple">The tuple which is comprised of two tuple halves.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this ((T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) left, T15 right) tuple) =>
        (tuple.left.Item1, tuple.left.Item2, tuple.left.Item3, tuple.left.Item4, tuple.left.Item5, tuple.left.Item6, tuple.left.Item7, tuple.left.Item8, tuple.left.Item9, tuple.left.Item10, tuple.left.Item11, tuple.left.Item12, tuple.left.Item13, tuple.left.Item14, tuple.left.Item15, tuple.right);

    /// <summary>
    /// Joins the two given tuple halves together and returns the joint tuple.
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="left">The left-hand half.</param>
    /// <param name="right">The right-hand half.</param>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) left, T15 right) =>
        (left.Item1, left.Item2, left.Item3, left.Item4, left.Item5, left.Item6, left.Item7, left.Item8, left.Item9, left.Item10, left.Item11, left.Item12, left.Item13, left.Item14, left.Item15, right);

    /// <summary>
    /// Joins the given the given elements to a common tuple.
    /// </summary>
    /// <param name="t0">The tuple element at position 1.</param>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/> for the argument <paramref name="t0"/>.</typeparam>
    /// <param name="t1">The tuple element at position 2.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/> for the argument <paramref name="t1"/>.</typeparam>
    /// <param name="t2">The tuple element at position 3.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/> for the argument <paramref name="t2"/>.</typeparam>
    /// <param name="t3">The tuple element at position 4.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/> for the argument <paramref name="t3"/>.</typeparam>
    /// <param name="t4">The tuple element at position 5.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/> for the argument <paramref name="t4"/>.</typeparam>
    /// <param name="t5">The tuple element at position 6.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/> for the argument <paramref name="t5"/>.</typeparam>
    /// <param name="t6">The tuple element at position 7.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/> for the argument <paramref name="t6"/>.</typeparam>
    /// <param name="t7">The tuple element at position 8.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/> for the argument <paramref name="t7"/>.</typeparam>
    /// <param name="t8">The tuple element at position 9.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/> for the argument <paramref name="t8"/>.</typeparam>
    /// <param name="t9">The tuple element at position 10.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/> for the argument <paramref name="t9"/>.</typeparam>
    /// <param name="t10">The tuple element at position 11.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/> for the argument <paramref name="t10"/>.</typeparam>
    /// <param name="t11">The tuple element at position 12.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/> for the argument <paramref name="t11"/>.</typeparam>
    /// <param name="t12">The tuple element at position 13.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/> for the argument <paramref name="t12"/>.</typeparam>
    /// <param name="t13">The tuple element at position 14.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/> for the argument <paramref name="t13"/>.</typeparam>
    /// <param name="t14">The tuple element at position 15.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/> for the argument <paramref name="t14"/>.</typeparam>
    /// <param name="t15">The tuple element at position 16.</param>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/> for the argument <paramref name="t15"/>.</typeparam>
    /// <returns>The merged tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) Join<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this T0 t0, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7, T8 t8, T9 t9, T10 t10, T11 t11, T12 t12, T13 t13, T14 t14, T15 t15) =>
        (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15);

    /// <summary>
    /// Creates a new array with exactly 16 elements from the given 16-tuple.
    /// </summary>
    /// <typeparam name="T">The generic type parameter.</typeparam>
    /// <param name="tuple">A 16-tuple.</param>
    /// <returns>The array (Length = 16) corresponding to the given tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T[] ToArray<T>(this (T t0, T t1, T t2, T t3, T t4, T t5, T t6, T t7, T t8, T t9, T t10, T t11, T t12, T t13, T t14, T t15) tuple) =>
        new[] { tuple.t0, tuple.t1, tuple.t2, tuple.t3, tuple.t4, tuple.t5, tuple.t6, tuple.t7, tuple.t8, tuple.t9, tuple.t10, tuple.t11, tuple.t12, tuple.t13, tuple.t14, tuple.t15 };

    /// <summary>
    /// Applies the given function <paramref name="func"/> to all elements of the given tuple <paramref name="x"/>.
    /// </summary>
    /// <typeparam name="T">The generic input tuple element type parameter.</typeparam>
    /// <typeparam name="U">The generic output tuple element type parameter.</typeparam>
    /// <param name="x">The input tuple.</param>
    /// <param name="func">The function to be applied element-wise to <paramref name="x"/>.</param>
    /// <returns>The resulting tuple.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static (U e0, U e1, U e2, U e3, U e4, U e5, U e6, U e7, U e8, U e9, U e10, U e11, U e12, U e13, U e14, U e15) Apply<T, U>(this (T e0, T e1, T e2, T e3, T e4, T e5, T e6, T e7, T e8, T e9, T e10, T e11, T e12, T e13, T e14, T e15) x, Func<T, U> func) =>
        (func(x.e0), func(x.e1), func(x.e2), func(x.e3), func(x.e4), func(x.e5), func(x.e6), func(x.e7), func(x.e8), func(x.e9), func(x.e10), func(x.e11), func(x.e12), func(x.e13), func(x.e14), func(x.e15));

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// </summary>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<void> ToActionPointer(void* pointer) => (delegate*<void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <see langword="void"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction(void* pointer) => ToActionPointer(pointer)();

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    ///  -> <typeparamref name="T0"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0> ToFunctionPointer<T0>(void* pointer) =>
        (delegate*<T0>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, void> ToActionPointer<T0>(void* pointer) =>
        (delegate*<T0, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    ///  -> <typeparamref name="T0"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T0 InvokeFunction<T0>(void* pointer) =>
        ToFunctionPointer<T0>(pointer)();

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0>(void* pointer, T0 arg0) =>
        ToActionPointer<T0>(pointer)(arg0);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/> -> <typeparamref name="T1"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1> ToFunctionPointer<T0, T1>(void* pointer) =>
        (delegate*<T0, T1>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, void> ToActionPointer<T0, T1>(void* pointer) =>
        (delegate*<T0, T1, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/> -> <typeparamref name="T1"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T1 InvokeFunction<T0, T1>(void* pointer, T0 arg0) =>
        ToFunctionPointer<T0, T1>(pointer)(arg0);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1>(void* pointer, T0 arg0, T1 arg1) =>
        ToActionPointer<T0, T1>(pointer)(arg0, arg1);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/> -> <typeparamref name="T2"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2> ToFunctionPointer<T0, T1, T2>(void* pointer) =>
        (delegate*<T0, T1, T2>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, void> ToActionPointer<T0, T1, T2>(void* pointer) =>
        (delegate*<T0, T1, T2, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/> -> <typeparamref name="T2"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T2 InvokeFunction<T0, T1, T2>(void* pointer, T0 arg0, T1 arg1) =>
        ToFunctionPointer<T0, T1, T2>(pointer)(arg0, arg1);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2>(void* pointer, T0 arg0, T1 arg1, T2 arg2) =>
        ToActionPointer<T0, T1, T2>(pointer)(arg0, arg1, arg2);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/> -> <typeparamref name="T3"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3> ToFunctionPointer<T0, T1, T2, T3>(void* pointer) =>
        (delegate*<T0, T1, T2, T3>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, void> ToActionPointer<T0, T1, T2, T3>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/> -> <typeparamref name="T3"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T3 InvokeFunction<T0, T1, T2, T3>(void* pointer, T0 arg0, T1 arg1, T2 arg2) =>
        ToFunctionPointer<T0, T1, T2, T3>(pointer)(arg0, arg1, arg2);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        ToActionPointer<T0, T1, T2, T3>(pointer)(arg0, arg1, arg2, arg3);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/> -> <typeparamref name="T4"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4> ToFunctionPointer<T0, T1, T2, T3, T4>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, void> ToActionPointer<T0, T1, T2, T3, T4>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/> -> <typeparamref name="T4"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T4 InvokeFunction<T0, T1, T2, T3, T4>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3) =>
        ToFunctionPointer<T0, T1, T2, T3, T4>(pointer)(arg0, arg1, arg2, arg3);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        ToActionPointer<T0, T1, T2, T3, T4>(pointer)(arg0, arg1, arg2, arg3, arg4);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/> -> <typeparamref name="T5"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5> ToFunctionPointer<T0, T1, T2, T3, T4, T5>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, void> ToActionPointer<T0, T1, T2, T3, T4, T5>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/> -> <typeparamref name="T5"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T5 InvokeFunction<T0, T1, T2, T3, T4, T5>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5>(pointer)(arg0, arg1, arg2, arg3, arg4);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/> -> <typeparamref name="T6"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/> -> <typeparamref name="T6"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T6 InvokeFunction<T0, T1, T2, T3, T4, T5, T6>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/> -> <typeparamref name="T7"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/> -> <typeparamref name="T7"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T7 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/> -> <typeparamref name="T8"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/> -> <typeparamref name="T8"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T8 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/> -> <typeparamref name="T9"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/> -> <typeparamref name="T9"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T9 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The argument no. 10.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/> -> <typeparamref name="T10"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/> -> <typeparamref name="T10"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="arg9">The argument no. 10.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T10 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The argument no. 10.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The argument no. 11.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/> -> <typeparamref name="T11"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/> -> <typeparamref name="T11"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="arg9">The argument no. 10.</param>
    /// <param name="arg10">The argument no. 11.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T11 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The argument no. 10.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The argument no. 11.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The argument no. 12.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/> -> <typeparamref name="T12"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/> -> <typeparamref name="T12"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="arg9">The argument no. 10.</param>
    /// <param name="arg10">The argument no. 11.</param>
    /// <param name="arg11">The argument no. 12.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T12 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The argument no. 10.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The argument no. 11.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The argument no. 12.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The argument no. 13.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/> -> <typeparamref name="T13"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/> -> <typeparamref name="T13"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="arg9">The argument no. 10.</param>
    /// <param name="arg10">The argument no. 11.</param>
    /// <param name="arg11">The argument no. 12.</param>
    /// <param name="arg12">The argument no. 13.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T13 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The argument no. 10.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The argument no. 11.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The argument no. 12.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The argument no. 13.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The argument no. 14.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/> -> <typeparamref name="T14"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/>, <typeparamref name="T14"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/> -> <typeparamref name="T14"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="arg9">The argument no. 10.</param>
    /// <param name="arg10">The argument no. 11.</param>
    /// <param name="arg11">The argument no. 12.</param>
    /// <param name="arg12">The argument no. 13.</param>
    /// <param name="arg13">The argument no. 14.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T14 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/>, <typeparamref name="T14"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The argument no. 10.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The argument no. 11.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The argument no. 12.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The argument no. 13.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The argument no. 14.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="arg14">The argument no. 15.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/>, <typeparamref name="T14"/> -> <typeparamref name="T15"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>)pointer;

    /// <summary>
    /// Casts the given <see langword="void"/>-pointer to a <see langword="delegate"/>-pointer using the given type arguments.
    /// The resulting <see langword="delegate"/>-pointer has the following method signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/>, <typeparamref name="T14"/>, <typeparamref name="T15"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="pointer">The <see langword="void"/>-pointer.</param>
    /// <returns>The resulting <see langword="delegate"/>-pointer which points to the same address.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void> ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(void* pointer) =>
        (delegate*<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, void>)pointer;

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/>, <typeparamref name="T14"/> -> <typeparamref name="T15"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <param name="arg1">The argument no. 2.</param>
    /// <param name="arg2">The argument no. 3.</param>
    /// <param name="arg3">The argument no. 4.</param>
    /// <param name="arg4">The argument no. 5.</param>
    /// <param name="arg5">The argument no. 6.</param>
    /// <param name="arg6">The argument no. 7.</param>
    /// <param name="arg7">The argument no. 8.</param>
    /// <param name="arg8">The argument no. 9.</param>
    /// <param name="arg9">The argument no. 10.</param>
    /// <param name="arg10">The argument no. 11.</param>
    /// <param name="arg11">The argument no. 12.</param>
    /// <param name="arg12">The argument no. 13.</param>
    /// <param name="arg13">The argument no. 14.</param>
    /// <param name="arg14">The argument no. 15.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    /// <returns>The invoked function's return value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static T15 InvokeFunction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) =>
        ToFunctionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);

    /// <summary>
    /// Invokes the given <see langword="void"/>-pointer with the given arguments as a method with the following signature:
    /// <para/>
    /// <para/>
    /// <code>
    /// <typeparamref name="T0"/>, <typeparamref name="T1"/>, <typeparamref name="T2"/>, <typeparamref name="T3"/>, <typeparamref name="T4"/>, <typeparamref name="T5"/>, <typeparamref name="T6"/>, <typeparamref name="T7"/>, <typeparamref name="T8"/>, <typeparamref name="T9"/>, <typeparamref name="T10"/>, <typeparamref name="T11"/>, <typeparamref name="T12"/>, <typeparamref name="T13"/>, <typeparamref name="T14"/>, <typeparamref name="T15"/> -> <see langword="void"/>
    /// </code>
    /// </summary>
    /// <typeparam name="T0">The generic type parameter <typeparamref name="T0"/>.</typeparam>
    /// <param name="arg0">The argument no. 1.</param>
    /// <typeparam name="T1">The generic type parameter <typeparamref name="T1"/>.</typeparam>
    /// <param name="arg1">The argument no. 2.</param>
    /// <typeparam name="T2">The generic type parameter <typeparamref name="T2"/>.</typeparam>
    /// <param name="arg2">The argument no. 3.</param>
    /// <typeparam name="T3">The generic type parameter <typeparamref name="T3"/>.</typeparam>
    /// <param name="arg3">The argument no. 4.</param>
    /// <typeparam name="T4">The generic type parameter <typeparamref name="T4"/>.</typeparam>
    /// <param name="arg4">The argument no. 5.</param>
    /// <typeparam name="T5">The generic type parameter <typeparamref name="T5"/>.</typeparam>
    /// <param name="arg5">The argument no. 6.</param>
    /// <typeparam name="T6">The generic type parameter <typeparamref name="T6"/>.</typeparam>
    /// <param name="arg6">The argument no. 7.</param>
    /// <typeparam name="T7">The generic type parameter <typeparamref name="T7"/>.</typeparam>
    /// <param name="arg7">The argument no. 8.</param>
    /// <typeparam name="T8">The generic type parameter <typeparamref name="T8"/>.</typeparam>
    /// <param name="arg8">The argument no. 9.</param>
    /// <typeparam name="T9">The generic type parameter <typeparamref name="T9"/>.</typeparam>
    /// <param name="arg9">The argument no. 10.</param>
    /// <typeparam name="T10">The generic type parameter <typeparamref name="T10"/>.</typeparam>
    /// <param name="arg10">The argument no. 11.</param>
    /// <typeparam name="T11">The generic type parameter <typeparamref name="T11"/>.</typeparam>
    /// <param name="arg11">The argument no. 12.</param>
    /// <typeparam name="T12">The generic type parameter <typeparamref name="T12"/>.</typeparam>
    /// <param name="arg12">The argument no. 13.</param>
    /// <typeparam name="T13">The generic type parameter <typeparamref name="T13"/>.</typeparam>
    /// <param name="arg13">The argument no. 14.</param>
    /// <typeparam name="T14">The generic type parameter <typeparamref name="T14"/>.</typeparam>
    /// <param name="arg14">The argument no. 15.</param>
    /// <typeparam name="T15">The generic type parameter <typeparamref name="T15"/>.</typeparam>
    /// <param name="arg15">The argument no. 16.</param>
    /// <param name="pointer">The <see langword="void"/>-pointer which points to a valid function.</param>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void InvokeAction<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(void* pointer, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) =>
        ToActionPointer<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(pointer)(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
}
